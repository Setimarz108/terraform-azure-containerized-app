name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Create ACR if not exists
      run: |
        # Create ACR for your existing resource group
        if ! az acr show --name portfoliodevaf9f3354 --resource-group portfolio-dev-rg-af9f3354 > /dev/null 2>&1; then
          echo "Creating ACR..."
          az acr create \
            --resource-group portfolio-dev-rg-af9f3354 \
            --name portfoliodevaf9f3354 \
            --sku Basic \
            --admin-enabled true
        else
          echo "ACR already exists"
        fi

    - name: Login to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: portfoliodevaf9f3354.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Build and push backend to ACR
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: portfoliodevaf9f3354.azurecr.io/portfolio-backend:latest

    - name: Build and push frontend to ACR
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: portfoliodevaf9f3354.azurecr.io/portfolio-frontend:latest

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: |
        cd terraform
        terraform init

    - name: Update terraform.tfvars
      run: |
        cd terraform
        cat > terraform.tfvars << EOF
        project_name = "portfolio"
        environment  = "dev"
        location     = "East US"
        
        db_admin_username = "portfolioadmin"
        db_admin_password = "${{ secrets.DB_ADMIN_PASSWORD }}"
        
        # ACR image URLs
        backend_image  = "portfoliodevaf9f3354.azurecr.io/portfolio-backend:latest"
        frontend_image = "portfoliodevaf9f3354.azurecr.io/portfolio-frontend:latest"
        EOF

    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_registry_username: ${{ secrets.ACR_USERNAME }}
        TF_VAR_registry_password: ${{ secrets.ACR_PASSWORD }}

    - name: Output URLs
      run: |
        cd terraform
        echo "=== Deployment Complete ==="
        echo "Frontend URL: $(terraform output -raw frontend_url 2>/dev/null || echo 'Not available')"
        echo "Backend URL: $(terraform output -raw backend_url 2>/dev/null || echo 'Not available')"