name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Create Infrastructure (ACR will be created here)
      run: |
        cd terraform
        terraform init
        
        # Deploy infrastructure first (this creates ACR)
        terraform apply -auto-approve -target=azurerm_resource_group.main
        terraform apply -auto-approve -target=module.networking
        terraform apply -auto-approve -target=random_id.suffix
        
        # Get the resource suffix for ACR name
        RESOURCE_SUFFIX=$(terraform output -raw resource_suffix)
        echo "RESOURCE_SUFFIX=$RESOURCE_SUFFIX" >> $GITHUB_ENV
        echo "ACR_NAME=portfoliodev$RESOURCE_SUFFIX" >> $GITHUB_ENV
        echo "RESOURCE_GROUP=portfolio-dev-rg-$RESOURCE_SUFFIX" >> $GITHUB_ENV
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_registry_username: ${{ secrets.ACR_USERNAME }}
        TF_VAR_registry_password: ${{ secrets.ACR_PASSWORD }}

    - name: Create ACR and Service Principal
      run: |
        # Create ACR
        echo "Creating ACR: $ACR_NAME in resource group: $RESOURCE_GROUP"
        az acr create \
          --resource-group $RESOURCE_GROUP \
          --name $ACR_NAME \
          --sku Basic \
          --admin-enabled true
        
        # Create service principal for ACR access
        SP_OUTPUT=$(az ad sp create-for-rbac \
          --name "acr-sp-$RESOURCE_SUFFIX" \
          --role "AcrPull" \
          --scopes $(az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP --query id --output tsv))
        
        # Extract credentials
        SP_APP_ID=$(echo $SP_OUTPUT | jq -r '.appId')
        SP_PASSWORD=$(echo $SP_OUTPUT | jq -r '.password')
        
        # Add AcrPush permission
        az role assignment create \
          --assignee $SP_APP_ID \
          --role "AcrPush" \
          --scope $(az acr show --name $ACR_NAME --resource-group $RESOURCE_GROUP --query id --output tsv)
        
        # Set environment variables for next steps
        echo "SP_APP_ID=$SP_APP_ID" >> $GITHUB_ENV
        echo "SP_PASSWORD=$SP_PASSWORD" >> $GITHUB_ENV

    - name: Login to Dynamic ACR
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.ACR_NAME }}.azurecr.io
        username: ${{ env.SP_APP_ID }}
        password: ${{ env.SP_PASSWORD }}

    - name: Build and push backend to ACR
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.ACR_NAME }}.azurecr.io/portfolio-backend:latest

    - name: Build and push frontend to ACR
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.ACR_NAME }}.azurecr.io/portfolio-frontend:latest

    - name: Update Terraform Variables with Dynamic ACR
      run: |
        cd terraform
        
        # Update terraform.tfvars with dynamic ACR URLs
        cat > terraform.tfvars << EOF
        project_name = "portfolio"
        environment  = "dev"
        location     = "East US"
        
        db_admin_username = "portfolioadmin"
        db_admin_password = "${{ secrets.DB_ADMIN_PASSWORD }}"
        
        # Dynamic ACR URLs
        backend_image  = "$ACR_NAME.azurecr.io/portfolio-backend:latest"
        frontend_image = "$ACR_NAME.azurecr.io/portfolio-frontend:latest"
        EOF

    - name: Complete Terraform Deployment
      run: |
        cd terraform
        terraform apply -auto-approve
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        TF_VAR_db_admin_password: ${{ secrets.DB_ADMIN_PASSWORD }}
        TF_VAR_registry_username: ${{ env.SP_APP_ID }}
        TF_VAR_registry_password: ${{ env.SP_PASSWORD }}

    - name: Output URLs
      run: |
        cd terraform
        echo "=== Deployment Complete ==="
        echo "Frontend URL: $(terraform output -raw frontend_url)"
        echo "Backend URL: $(terraform output -raw backend_url)"
        echo "Resource Group: $(terraform output -raw resource_group_name)"